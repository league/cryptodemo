<html>
<head>
<title>GPL JavaScript Public Key Encryption Demo</title>
</head>

<body>
<script src="crypto-util.js"></script>
<script src="crypto2.js"></script>
<h2>JAVAScript Public Key Encryption Demo</h2>
Here's everything you need to do secure, public key, browser-based
transactions. The code works seemlessly with the shopping cart system
and is about as optimized as I can make it. I may work to do something
fancy with generating random numbers with higher entropy, or adding
a passphrase to protect the private key. 
<p>
First you need to generate a key pair. (Actually, it's four numbers: p, q, d,
and e: p * q and e make the "public key" and p, q, and d make the "private
key.") This is the
slowest part. Pick how large a key you want. Larger keys are more secure,
but take longer to generate, and somewhat longer to use (especially decrypting
the orders). 512 bit key modulos (32 byte keys, ie p and q are 256 bits each)
are still considered somewhat secure. My browser took about 3 minutes
to generate a key of this size on my p2-450. Try a smaller one first, like 8 bytes and
square that time twice to see how long it might take for you.<p>

Encrypting the orders takes very little time, maybe a second or two,
but those decrypting will notice a definate lag (7 seconds for me).
<p>
Note that many browsers require you to NOT cancel the script after it is
taking a while to generate the keys. I've tested this on InternetExplorer 5 (win).
If you find it works/doesn't work with another browser, let me know. I've been
told that Netscape is much slower than Microsoft for this type of thing.<p>
<form name=t>
Random seed: <textarea name=rseed rows=3 cols=20
onChange="seed(this.value)"></textarea>
<br>
<a href="www.random.org">Random.org</a> will provide us with a random seed
by clicking <a href="http://www.random.org/cgi-bin/randbyte?nbytes=1024&format=hex" target="_blank">here</a>.
Ctrl-a and Ctrl-c to copy the text, then paste it above.
<p>
key bytes: <input type=text name=keylen size=2 value=8>
<input type=button value=GenerateKey onClick="genkey(document.t.keylen.value,document.t)"><br>
prime factor p: <input type=text name=p size=10>
prime factor q: <input type=text name=q size=10><br>
(Note: these are used to build your key values.)<br>
Public Modulo (p*q): <input type=text name=pq size=40><br>
Private exponent (d): <input type=text name=d size=40 value=""><br>
Public exponent (e): <input type=text name=e size=40 value=""> <br>
text:
<textarea name=text rows=8, cols=40>your secret text goes here</textarea>
<input type=button value="Encrypt" onClick="enc(document.t)">
<input type=button value="Decrypt" onClick="dec(document.t)">
<br>
Decrypting takes <input type=text name=howLong size=4> seconds<br>
This took <input type=text name="howLong2" size=4> seconds<br>
</form>

<h3>How to use these:</h3>
This is free software. I make absolutely NO WARRANTY whatsoever that this
software does anything. See the
<a href="http://www.gnu.org/copyleft/gpl.html">GPL</a> for details.<p>
Generate a key pair. For example, when I did I got:<ul>
<li>p: 40632295,2191 (private)
<li>q: 122927507,2595 (private)
<li>d: 119141457,185046352,2676254 (private)
<li>p*q: 148299941,57683965,5687041 (public)
<li>e: 17 (public)</ul>
<i>Note: this example is trivially insecure</i><p>
Put a copy of crypto.js on your hard drive and on the server. Then
add the following to your public script on your server:<br>
<textarea rows=5 cols=70>
<script>
function encrypt() {
 document.form.text.value=rsaEncode([17],
  [148299941,57683965,5687041],document.form.text.value)
}
</script>
</textarea><P>
And put the following in your private script (probably on your local hard
disk -- not on the internet -- if your private key is found this whole
thing is useless.)<br>
<textarea rows=7 cols=70>
<script>
function decrypt() {
 // key = [ [d], [p], [q] ];
 var key=[[119141457,185046352,2676254],[40632295,2191],[122927507,2595]];
 document.form.text.value=rsaDecode(key, document.form.text.value);
}
</script>
</textarea>
<p>Ok, so you might want to do something more interesting than just put
the data into document.form.text.value (this assumes you have a &lt;form name="form"&gt;
in your document, by the way).

<p>Enjoy!
<p>John
<p>
<h3>Change log</h3>
<table border=1>
<tr><td>7/12/02</td><td>
I found a bug in the b2t function (crypto.js) which made odd key sizes fail. It's fixed
I also changed the crypto.js rc4 to be more secure (especially with short keys)
and to be compatible with the decryptor.py python script. Encryptions made
with this version ARE NOT COMPATIBLE with encryptions made the old way.
</td></tr>
<tr><td>4/25/01</td><td>
I just found out about random.org and changed the seed function to take
advantage of it.
</td></tr>
<tr><td>3/19/01</td><td>
Just for kicks I thought I'd try to generate a 960 bit (60 byte) key pair.
On my p2-450 it took slightly more than 10 minutes to generate the keys,
and decryption took 33 seconds. I'm happy.
</td></tr>
<tr><td>3/19/01</td><td>added the entropy pool to the random number generator. This only
slowed key generation by < 10%, so I think it's worth keeping.<br>
</td></tr>
<tr><td>
3/11/01</td><td>replaced decode's mod-exp call with optimized Chinese Remainder
Therom version; decodes are roughly 2x faster. NOTE: this means calling
interface for rsaDecode is changed.<br>
</td></tr>
<tr><td>3/10/01</td><td>replaced general slow radix function with simple optimized
versions for b2t, t2b, textToBase64 and base64ToText; this greately
accelerated encrypting longer strings<br>
</td></tr>
<tr><td>3/10/01</td><td>rewrote session key generation (again)<br>
</td></tr>
<tr><td>1/25/01</td><td>concluding massive rewrite including Maurer's provable primes and
Barrett's modular reduction; increased speed by 10 - 100 times<br>
</td></tr>
<tr><td>1/3/01</td><td>added sieve to prime number locator -- increasing speed lots!<br>
</td></tr></table>

</body>
</html>
